/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package com.renren.entries.core.query.parser;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import com.renren.entries.core.query.Field;
import com.renren.entries.core.query.Query;
import com.renren.entries.core.query.Value;

/**
 * 
 * @author qieqie.wang@gmail.com
 *
 */
public class QueryParser implements QueryParserConstants {

    /**
     * main method to test parser.
     * <p>
     * e.g author:123456 and master:(654321) and point_x:116.45-116.47 and point_x:(39.91-39.93) and tag:(123 or 456 or 678) and create_time:(232134-232144);
     * 
     * @throws ParseException
     */
    public static void main(String args[]) throws ParseException {
        QueryParser p = null;
        if (args.length < 1) {
            System.out.println("Reading from stdin");
            p = new QueryParser(System.in);
        } else {
            try {
                p = new QueryParser(new DataInputStream(new FileInputStream(args[0])));
            } catch (FileNotFoundException e) {
                System.out.println("File " + args[0] + " not found. Reading from stdin");
                p = new QueryParser(System.in);
            }
        }

        if (args.length > 0) {
            System.out.println(args[0]);
        }
        Query query = p.parse();
        System.out.println(query);

    }

// tag:(123 or 456 or 678) and create_time:(232134-232144)
  final public Query parse() throws ParseException {
    Query query = new Query();
    Field field = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        jj_consume_token(K_AND);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      field = FieldExpression();
                                            query.addField(field);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
      case FIELD_NAME:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

// tag:123
// tag:(123)
// tag:(123 or 456 or 678)
  final public Field FieldExpression() throws ParseException {
        Field field = new Field();
        Token t = null;
        Value value = null;
    t = jj_consume_token(FIELD_NAME);
                             field.setName(t.image);
    jj_consume_token(17);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          jj_consume_token(K_OR);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        value = FieldValueExpression();
                                                         value.setField(t.image); field.addValue(value);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
        case QUOTED_IDENTIFIER:
        case FIELD_NUMBER_VALUES:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(19);
      break;
    case QUOTED_IDENTIFIER:
    case FIELD_NUMBER_VALUES:
      value = FieldValueExpression();
                                            value.setField(t.image); field.addValue(value);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return field;}
    throw new Error("Missing return statement in function");
  }

  final public Value FieldValueExpression() throws ParseException {
        Value value = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIELD_NUMBER_VALUES:
      value = FieldNumberValuesExpression();
      break;
    case QUOTED_IDENTIFIER:
      value = FieldStringValueExpression();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public Value FieldNumberValuesExpression() throws ParseException {
        Value value = new Value();
        Token t = null;
    t = jj_consume_token(FIELD_NUMBER_VALUES);
            int index = t.image.indexOf('-');
            if (index >= 0) {
                value.setValue1(t.image.substring(0, index));
                value.setValue2(t.image.substring(index + 1));
            } else {
                value.setValue1(t.image);
            }
            index = t.image.indexOf('.');
            if (index >=0) {
                value.setType(Value.DOUBLE);
            } else {
                value.setType(Value.INTEGER);
            }
            {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public Value FieldStringValueExpression() throws ParseException {
        Value value = new Value();
        Token t = null;
    t = jj_consume_token(QUOTED_IDENTIFIER);
            value.setValue1(t.image.substring(1, t.image.length() - 1));
            value.setType(Value.STRING);
            {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x280,0x10000,0x100,0xd00,0x40c00,0xc00,};
   }

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
