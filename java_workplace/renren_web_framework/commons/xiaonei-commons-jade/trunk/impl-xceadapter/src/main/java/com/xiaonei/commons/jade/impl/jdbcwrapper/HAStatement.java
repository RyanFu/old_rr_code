package com.xiaonei.commons.jade.impl.jdbcwrapper;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * 实现可扩展数据库访问策略的: JDBC 查询语句。
 * 
 * @author han.liao
 */
public abstract class HAStatement extends BaseStatement<Statement> {

    protected final HAConnection connection;

    /**
     * 构造: XceStatement 实例。
     * 
     * @param connection - 创建的连接。
     */
    public HAStatement(HAConnection connection) {

        this.connection = connection;
    }

    @Override
    public void addBatch(String sql) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        super.addBatch(rewritten);
    }

    @Override
    public boolean execute(String sql) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.execute(rewritten);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.execute(rewritten, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.execute(rewritten, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.execute(rewritten, columnNames);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.executeUpdate(rewritten);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.executeUpdate(rewritten, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.executeUpdate(rewritten, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.executeUpdate(rewritten, columnNames);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {

        if (connection.analyzeSql(sql)) {

            freeStatement(); // 关闭当前的查询语句
        }

        // 重写查询语句。
        String rewritten = connection.rewriteSql(sql);

        return super.executeQuery(rewritten);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }
}
