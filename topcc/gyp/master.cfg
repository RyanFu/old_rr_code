'''
Created on Aug 24, 2012

@author: Huabin Zheng
@copyright: renren-inc
'''

import os.path
from buildbot.buildslave import BuildSlave
from buildbot.changes.svnpoller import (SVNPoller,
                                        split_file_branches
                                        )
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.basic import (Scheduler,
                                       SingleBranchScheduler,
                                       )
from buildbot.schedulers.forcesched import *
from buildbot.scheduler import Periodic
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import SVN
from buildbot.steps.shell import (
                                ShellCommand,
                                WarningCountingShellCommand,
                                Compile,
                                Test
                                )
from buildbot.config import BuilderConfig
from buildbot.status import html
from buildbot.status.web import (authz,
                                 auth
                                 )
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results
import cgi, datetime
from buildbot.status.results import *


# setup
SVN_URL = 'http://svn.d.xiaonei.com/ugc/upload/trunk/topcc'
SVN_POLL_INTERVAL = 5 * 60 # interval of polling SVN source code changes, in seconds
CLEAN_BUILD_INTERVAL = 24 * 60 * 60
SLAVE_INFOS = (('slave', 'pass'),) #slave (name, password) pairs
COMPILE_WARNING_PATTERN = "(.* warning:.*)|(.* error:.*)"
TEST_WARNING_PATTERN = "^\\[err\\]:.*"
FORCE_BUILDER_NAME = "Force build scheduler"
PRODUCT_DIR = '/data/uploadtest/bin'
#email notify
FROM_ADDR = "photo@renren.com"
RELAY_HOST = "smtp.renren.com"
EXTRA_RECIPIENTS = [
                'qinghui.liu@renren-inc.com',
                'huabin.zheng@renren-inc.com',
                'jili.chen@renren-inc.com'
                ]
SMTP_USER = "photo@renren.com"
SMTP_PASSWORD = "photo_sparta_1207"

buildbot_root = '/data/buildbot/'
project_infos = {
                 'NewUpload' : {
                                'projecttop' : 'NewUpload',
                                'productname' : 'upload.fcgi',
                                'subdir' : 'upload_new',
                                'gyp' : 'new.gyp',
                                'compile' : 'make upload.fcgi -j8',
                                'test' : 'make test',
                                'coverage' : 'make coverage',
                                'valgrind' : 'make valgrind',
                                'restart' : 'restart_upload_test'
                                },
                 'OldUpload' : {
                                'projecttop' : 'OldUpload',
                                'productname' : 'uploadservice.fcgi',
                                'subdir' : 'upload_cwf',
                                'gyp' : 'upload.gyp',
                                'compile' : 'make uploadservice.fcgi -j8',
                                'test' : '',
                                'coverage' : '',
                                'valgrind' : '',
                                'restart' : '',
                                },
                 'RRImage' : {
                                'projecttop' : 'RRImage',
                                'productname' : 'rrimage.fcgi',
                                'subdir' : 'rrimage',
                                'gyp' : 'rr.gyp',
                                'compile' : 'source ./rrsource && make rrimage.fcgi -j8',
                                'test' : '',
                                'coverage' : '',
                                'valgrind' : '',
                                'restart' : '',
                                },
                 }

step_descs = {
              'cpplint' : {
                           'command' : ('find ./ -regex ".*\.\(h\|cc\|cpp\)"' 
                                ' -print | xargs cpplint.py'),
                           'description': 'cpplint',
                           'descriptionDone':'cpplint',
                           'warningPattern':'.*'
                           },
              'clear' : {
                           'command' : 'sh clear.sh',
                           'description': 'clear',
                           'descriptionDone':'clear',
                           'warningPattern':''
                           },
              'genmakefile' : {
                           'command' : 'sh a.sh', # add command parameter
                           'description': 'generating makefile',
                           'descriptionDone':'generate makefile',
                           'warningPattern':''
                           },
              }
# customization
def split_and_filter_file_branches(not_interested_dir_set, path=None):
  """
  turn trunk/subdir/file.c into (None, "subdir/file.c")
  and branches/1.5.x/subdir/file.c into ("branches/1.5.x", 
  "subdir/file.c")
  """
  def wrapper(path):
    pieces = path.split('/')
    print(path)
    print(not_interested_dir_set)
    if pieces[0] in not_interested_dir_set:
      return None
    return (pieces[0], '/'.join(pieces[1:]))
  return wrapper
  
def email_msg_formatter(mode, name, build, results, master_status):
    """Provide a customized message to Buildbot's MailNotifier.

    The last 80 lines of the log are provided as well as the changes
    relevant to the build.  Message content is formatted as html.
    """
    result = Results[results]

    limit_lines = 80
    text = list()
    text.append(u'<h4>Build status: %s</h4>' % result.upper())
    text.append(u'<table cellspacing="10"><tr>')
    text.append(u"<td>Buildslave for this Build:</td><td><b>%s</b></td></tr>" % build.getSlavename())
    if master_status.getURLForThing(build):
        text.append(u'<tr><td>Complete logs for all build steps:</td><td><a href="%s">%s</a></td></tr>'
                    % (master_status.getURLForThing(build),
                       master_status.getURLForThing(build))
                    )
        text.append(u'<tr><td>Build Reason:</td><td>%s</td></tr>' % build.getReason())
        source = u""
        ss = build.getSourceStamp()
        if ss.branch:
            source += u"[branch %s] " % ss.branch
        if ss.revision:
            source += ss.revision
        else:
            source += u"HEAD"
        if ss.patch:
            source += u" (plus patch)"
        if ss.patch_info: # add patch comment
            source += u" (%s)" % ss.patch_info[1]
        text.append(u"<tr><td>Build Source Stamp:</td><td><b>%s</b></td></tr>" % source)
        text.append(u"<tr><td>Blamelist:</td><td>%s</td></tr>" % ",".join(build.getResponsibleUsers()))
        text.append(u'</table>')
        if ss.changes:
            text.append(u'<h4>Recent Changes:</h4>')
            for c in ss.changes:
                cd = c.asDict()
                when = datetime.datetime.fromtimestamp(cd['when']).ctime()
                text.append(u'<table cellspacing="10">')
                text.append(u'<tr><td>Repository:</td><td>%s</td></tr>' % cd['repository'])
                text.append(u'<tr><td>Project:</td><td>%s</td></tr>' % cd['project'])
                text.append(u'<tr><td>Time:</td><td>%s</td></tr>' % when)
                text.append(u'<tr><td>Changed by:</td><td>%s</td></tr>' % cd['who'])
                text.append(u'<tr><td>Comments:</td><td>%s</td></tr>' % cd['comments'])
                text.append(u'</table>')
                files = cd['files']
                if files:
                    text.append(u'<table cellspacing="10"><tr><th align="left">Files</th><th>URL</th></tr>')
                    for file in files:
                        print(file)
                        if 'url' in file:
                          text.append(u'<tr><td>%s:</td><td>%s</td></tr>' % (file['name'], file['url']))
                        else:
                          text.append(u'<tr><td>%s:</td><td>%s</td></tr>' % (file['name'], 'file url is not available'))
                    text.append(u'</table>')
        text.append(u'<br>')
        # get log for last step
        logs = build.getLogs()
        # logs within a step are in reverse order. Search back until we find stdio
        for log in reversed(logs):
            if log.getName() == 'stdio':
                break
        name = "%s.%s" % (log.getStep().getName(), log.getName())
        status, dummy = log.getStep().getResults()
        content = log.getText().splitlines() # Note: can be VERY LARGE
        url = u'%s/steps/%s/logs/%s' % (master_status.getURLForThing(build),
                                       log.getStep().getName(),
                                       log.getName())

        text.append(u'<i>Detailed log of last build step:</i> <a href="%s">%s</a>'
                    % (url, url))
        text.append(u'<br>')
        text.append(u'<h4>Last %d lines of "%s"</h4>' % (limit_lines, name))
        unilist = list()
        for line in content[len(content) - limit_lines:]:
            unilist.append(cgi.escape(unicode(line, 'utf-8')))
        text.append(u'<pre>'.join([uniline for uniline in unilist]))
        text.append(u'</pre>')
        text.append(u'<br><br>')
        text.append(u'<b>-The Buildbot</b>')
        return {
            'body': u"\n".join(text),
            'type': 'html'
            }

class CpplintShellCommand(WarningCountingShellCommand):
        def evaluateCommand(self, cmd):
            if self.warnCount:
                return WARNINGS 
            return SUCCESS

class RestartServiceCommand(WarningCountingShellCommand):
  def buildCommandKwargs(self, warnings):
    global FORCE_BUILDER_NAME
    kwargs = WarningCountingShellCommand.buildCommandKwargs(self, warnings)
    props = self.step_status.getBuild().getProperties()
    if props['scheduler'] != FORCE_BUILDER_NAME:
      kwargs['command'] = 'echo \'do nothing\''
    return kwargs
    #print(self.step_status.getBuild().getReason())
    #print(self.step_status.getBuild().getProperties())
    #print(self.step_status.getBuild().getBuilder())
    #print(self.step_status.getBuild().getChanges())
    
#############################################################################
c = BuildmasterConfig = {}
####### BUILDSLAVES
c['slaves'] = []
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

builder_names = []

for slave in SLAVE_INFOS:
    c['slaves'].append(BuildSlave(slave[0], slave[1]))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989


for (project, info) in project_infos.iteritems():
    subdir = info['subdir']
    not_interested_set = set(proj['subdir'] for proj in project_infos.itervalues())
    not_interested_set.discard(subdir)
    ####### CHANGESOURCES
    c['change_source'].append(SVNPoller(svnurl=SVN_URL,
                                    split_file=split_and_filter_file_branches(not_interested_set),
                                    pollInterval=SVN_POLL_INTERVAL,
                                    project=project))

    ####### SCHEDULERS
    source_change_sched = SingleBranchScheduler(name=project + " source change scheduler",
                                        treeStableTimer=10,
                              change_filter=ChangeFilter(project=project),
                              builderNames=[project + '_Builder', ])
    c['schedulers'].append(source_change_sched)
    ####### BUILDFACTORIES
    source_change_job = BuildFactory()
    svnworkdir = os.path.join(buildbot_root, info['projecttop'])
    cpplintworkdir = os.path.join(buildbot_root, info['projecttop'], subdir)
    cmdworkdir = os.path.join(buildbot_root, info['projecttop'], 'gyp')
    # check out the source
    source_change_job.addStep(SVN(SVN_URL, None, 'incremental', workdir=svnworkdir))
    # cpplint
    stepname = 'cpplint'
    source_change_job.addStep(CpplintShellCommand(name=stepname,
                                                  workdir=cpplintworkdir,
                                                  command=step_descs[stepname]['command'],
                                                  description=step_descs[stepname]['description'],
                                                  descriptionDone=step_descs[stepname]['descriptionDone'],
                                                  warningPattern=step_descs[stepname]['warningPattern'],
                                                  maxWarnCount=None
                                                  ))
    # clear
    stepname = 'clear'
    source_change_job.addStep(ShellCommand(name=stepname,
                                    workdir=cmdworkdir,
                                    command=step_descs[stepname]['command'],
                                    description=step_descs[stepname]['description'],
                                    descriptionDone=step_descs[stepname]['descriptionDone']
                                    ))
    #generate makefile
    stepname = 'genmakefile'
    source_change_job.addStep(ShellCommand(name=stepname,
                                    workdir=cmdworkdir,
                                    command=step_descs[stepname]['command'] + " " + info['gyp'],
                                    description=step_descs[stepname]['description'],
                                    descriptionDone=step_descs[stepname]['descriptionDone']
                                    ))
    #compile
    stepname = 'compile' 
    cmd = project_infos[project][stepname]
    source_change_job.addStep(WarningCountingShellCommand(
                                    command=cmd,
                                    name=stepname,
                                    workdir=cmdworkdir,
                                    description='compiling',
                                    descriptionDone='compile',
                                    warningPattern=COMPILE_WARNING_PATTERN,
                                    ))
    #test
    stepname = 'test'
    cmd = project_infos[project][stepname]
    if cmd:
      source_change_job.addStep(Test(workdir=cmdworkdir))
    #coverage
    stepname = 'coverage'
    cmd = project_infos[project][stepname]
    if cmd:
      source_change_job.addStep(ShellCommand(name=stepname,
                                    workdir=cmdworkdir,
                                    command=cmd,
                                    description='coverage',
                                    descriptionDone='coverage',
                                    ))
    #valgrind
    stepname = 'valgrind'
    cmd = project_infos[project][stepname]
    if cmd:
      source_change_job.addStep(ShellCommand(name=stepname,
                                    workdir=cmdworkdir,
                                    command=cmd,
                                    description='valgrind',
                                    descriptionDone='valgrind',
                                    ))
    #restart service 
    stepname = 'restart'
    restart_cmd = project_infos[project][stepname]
    if restart_cmd:
      cmd = 'rm %s; cp out/Default/%s %s && %s' % (
                              os.path.join(PRODUCT_DIR,
                                    project_infos[project]['productname']),
                              project_infos[project]['productname'],
                              PRODUCT_DIR,
                              restart_cmd)
      source_change_job.addStep(RestartServiceCommand(name=stepname,
                                    workdir=cmdworkdir,
                                    command=cmd,
                                    description='restarting',
                                    descriptionDone='restarted',
                                    ))
          
    builder_name = project + '_Builder'
    builder_names.append(builder_name)
    c['builders'].append(BuilderConfig(name=builder_name, slavenames=["slave"],
                                        factory=source_change_job))
# force_sched    
force_sched = ForceScheduler(name=FORCE_BUILDER_NAME,
                             builderNames=builder_names,
                             # will generate a combo box 
                             #branch=ChoiceStringParameter(name="branch", 
                             #choices=["main", "devel"], default="main"), 
                             # will generate a text input 
                             reason=StringParameter(name="reason",
                                                    label="reason:<br>",
                                                    required=True, size=80),
                             # will generate nothing in the form, but revision, repository, 
                             # and project are needed by buildbot scheduling system so we 
                             # need to pass a value ("") 
                             revision=FixedParameter(name="revision", default=""),
                             repository=FixedParameter(name="repository", default=""),
                             project=FixedParameter(name="project", default=""),
                             # in case you dont require authentication this will display 
                             # input for user to type his name 
                             username=UserNameParameter(label="your name:<br>", required=True, size=80),
                             properties=[]
  )
c['schedulers'].append(force_sched)
# periodic_sched
"""
periodic_sched = Periodic("Periodic scheduler", ['CleanBuilder', ],
                        CLEAN_BUILD_INTERVAL) 

c['schedulers'].append(periodic_sched)

clean_build_job = BuildFactory()
clean_build_job.addStep(SVN(SVN_URL, None, 'incremental', workdir=svnworkdir))
clean_build_job.addStep(ShellCommand(name="make_distclean", workdir=cmdworkdir,
                                    description=DESCRIPTIONS['clear'][0],
                                    descriptionDone=DESCRIPTIONS['clear'][1],
                                    command=['sh', 'clear.sh']))
clean_build_job.addStep(ShellCommand(name="generate_makefile", workdir=cmdworkdir,
                                    description=DESCRIPTIONS['genmakefile'][0],
                                    descriptionDone=DESCRIPTIONS['genmakefile'][1],
                                    command=["sh", "a.sh", "new.gyp"]))
clean_build_job.addStep(WarningCountingShellCommand(name="compile", workdir=cmdworkdir,
                                    command=["make", "-j", "8"],
                                    description=DESCRIPTIONS['compile'][0],
                                    descriptionDone=DESCRIPTIONS['compile'][1],
                                    warningPattern=COMPILE_WARNING_PATTERN))
# make test
#clean_build_job.addStep(Test(workdir="sourcedir/redis-2.4.15", warningPattern=TEST_WARNING_PATTERN))

# run the tests (note that this will require that 'trial' is installed)

c['builders'].append(
    BuilderConfig(name="CleanBuilder",
      slavenames=["slave"],
      factory=clean_build_job))
"""

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []


mn = MailNotifier(fromaddr=FROM_ADDR,
                  sendToInterestedUsers=True,
                  extraRecipients=EXTRA_RECIPIENTS,
                  relayhost=RELAY_HOST, smtpPort=25,
                  smtpUser=SMTP_USER, smtpPassword=SMTP_PASSWORD, addLogs=True,
                  messageFormatter=email_msg_formatter)
c['status'].append(mn)

authz_cfg = authz.Authz(
  # change any of these to True to enable; see the manual for more
  # options
  gracefulShutdown=False,
  forceBuild=True, # use this to test your slave once it is set up
  forceAllBuilds=False,
  pingBuilder=False,
  stopBuild=True,
  stopAllBuilds=False,
  cancelPendingBuild=False,
  showUsersPage=True,
  )
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, num_events=20))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Build"
c['titleURL'] = "http://svn.d.xiaonei.com/ugc/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://0.0.0.0:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
